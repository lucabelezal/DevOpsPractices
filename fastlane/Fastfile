default_platform(:ios)

platform :ios do

  workspace = "CSBootcamp.xcworkspace"
  project = "CSBootcamp.xcodeproj"
  scheme = ENV["SCHEME"]
  output_name = "#{ENV["ENV_NAME"]}.ipa"

  desc "Push a new beta build to Firebase App Distribution"
  lane :distribute do
    firebase_app_distribution(
      googleservice_info_plist_path: ENV["PATH_INFOPLIST"],
      firebase_cli_token: ENV['FIREBASE_TOKEN'],
      ipa_path: "./.fastlane/output/#{output_name}",
      testers: "lucabelezal@gmail.com",
      release_notes: "Lots of amazing new features to test out!",
      debug: true
    )
  end

  desc "Push a new beta build to Firebase App Distribution"
  lane :beta do
    scan
    build_number = get_build_number(xcodeproj: $project)
    increment_build_number(xcodeproj: $project, build_number: Integer(build_number) + 1)
    gym
    distribute
  end

  desc "Run UI and Unit Tests"
  lane :tests do
    run_tests(
      workspace: $workspace,
      devices: ["iPhone 11"],
      reinstall_app: true,
      code_coverage: true,
      derived_data_path: "Build",
      scheme: $scheme
  )
  end

  # desc "Build Only"
  # lane :build do
  #   build_app(workspace: $workspace, scheme: $scheme, skip_codesigning: true, skip_archive: true)
  # end

  desc "Generates screenshots"
  lane :screenshots do
    snapshot
  end

  desc "SwiftLint"
  lane :lint do
    swiftlint(executable: 'Pods/SwiftLint/swiftlint', strict: true)
  end

  desc "Coverage"
  lane :coverage do
    slather(
      sonarqube_xml: true,
      build_directory: "build/Build/",
      input_format: "profdata",
      output_directory: "Coverage/",
      scheme: $scheme,
      proj: $project,
      workspace: $workspace,
      ignore: ["CSBootcamp/*"]
    )
  end

  desc "Code Quality and Security"
  lane :sonarqube do
    sonar(
      project_key: "lucabelezal_DevOpsPractices",
      sonar_organization: "skeleton",
      project_name: $scheme,
      sources_path: File.expand_path("../CSBootcamp"),
      sonar_url: "https://sonarcloud.io"
    )
  end

  #set_github_release

  # lane :release do
  #   capture_screenshots                  # generate new screenshots for the App Store
  #   sync_code_signing(type: "appstore")  # see code signing guide for more information
  #   build_app(scheme: "MyApp")
  #   upload_to_app_store                  # upload your app to App Store Connect
  #   slack(message: "Successfully uploaded a new App Store build")
  # end

  # lane :beta do
  #   sync_code_signing(type: "appstore")    # see code signing guide for more information
  #   build_app(scheme: "MyApp")
  #   upload_to_testflight
  #   slack(message: "Successfully distributed a new beta build")
  # end

  # lane :beta do
  #   # ...
  #   build_app
  
  #   firebase_app_distribution(
  #     app: "1:123456789:ios:abcd1234",
  #     groups: "qa-team, trusted-testers"
  #   )
  #   # ...
  # end

  # lane :production do
  #   # ...
  #   build(release: true)
  #   appstore # Deploy to the AppStore
  #   # ...
  # end
  
  # lane :beta do
  #   # ...
  #   build(release: false)
  #   crashlytics # Distribute to testers
  #   # ...
  # end

  # lane :build do |options|
  #   # ...
  #   ipa
  #   # ...
  # end

  # lane :deploy do |options|
  #   # ...
  #   build(release: true) # that's the important bit
  #   hockey
  #   # ...
  # end
  
  # lane :staging do |options|
  #   # ...
  #   build # it also works when you don't pass parameters
  #   hockey
  #   # ...
  # end
  
  # lane :build do |options|
  #   scheme = (options[:release] ? "Release" : "Staging")
  #   build_ios_app(scheme: scheme)
  # end

#   fastlane [tool] --[option]=[value]

# fastlane deliver --skip_screenshots=true
# fastlane snapshot --screenshots_path=xxxxx --schema=xxxx

end


