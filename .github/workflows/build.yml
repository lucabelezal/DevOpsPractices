name: Build and Test
on:
  push:
    branches:
    - master
    - develop
jobs:        
  ci:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - destination: 'platform=iOS Simulator,name=iPhone 11,OS=latest'
          scheme: CSBootcamp
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.2
  
    - name: Gem cache
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gem-use-ruby-${{ hashFiles('**/Gemfile.lock') }}

    - name: Pods cache
      uses: actions/cache@v2
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

    - name: Setup Cocoapods
      uses: maxim-lobanov/setup-cocoapods@v1
      with:
        podfile-path: ./Podfile.lock

    - name: Install Bundle Dependencies
      run: |
        set -o pipefail
        rm -rf ~/Library/Developer/Xcode/DerivedData
        rm -rf Pods/
        rm -rf Podfile.lock
        rm -rf Gemfile.lock
        gem install bundler
        bundle install

    - name: Install Pod Dependencies
      run: |
        bundle exec pod install
      
    - name: Build and test
      run: |
        set -o pipefail
        xcodebuild -version
        # xcodebuild test -workspace ${workspace} -scheme "${scheme}" -destination "${destination}" ${params} | xcpretty && exit ${PIPESTATUS[0]}

        xcodebuild -workspace 'CSBootcamp.xcworkspace' \
        -scheme CSBootcamp -derivedDataPath build/ 
        -enableCodeCoverage YES clean build test \
        CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO \
        -destination 'platform=iOS Simulator,name=iPhone 11,OS=latest' \
        | xcpretty && exit ${PIPESTATUS[0]}

      env:
        workspace: 'CSBootcamp.xcworkspace'
        scheme: ${{ matrix.scheme }}
        destination: ${{ matrix.destination }}
        params: '-derivedDataPath ./DerivedData -enableCodeCoverage YES -sdk iphonesimulator'

    - name: Run Slather
      run: |        
        # bundle exec slather coverage --cobertura-xml ${workspace} ${params}
        # bundle exec slather coverage --sonarqube-xml ${workspace} ${params}
        set -o pipefail
        bundle exec slather coverage 
        --github \
        --sonarqube-xml \
        --build-directory ./build \
        --output-directory ./sonar-reports \
        --scheme CSBootcamp \
        --workspace CSBootcamp.xcworkspace

        set -o pipefail
        bundle exec slather coverage 
        --sonarqube-xml \
        --build-directory ./reports \
        --output-directory ./sonar-reports \
        --scheme CSBootcamp \
        --workspace CSBootcamp.xcworkspace

        bundle exec slather coverage 
        --github \
        --llvm-cov \
        --build-directory ./build \
        --output-directory ./sonar-reports \
        --scheme CSBootcamp \
        --workspace CSBootcamp.xcworkspace

        bundle exec slather coverage 
        --github \
        --llvm-cov \
        --build-directory ./reports \
        --output-directory ./sonar-reports \
        --scheme CSBootcamp \
        --workspace CSBootcamp.xcworkspace
        
      env:
        workspace: 'CSBootcamp.xcworkspace'
        params: '-scheme CSBootcamp --build-directory ./DerivedData --output-directory ./reports'
         
    - name: Run SwiftLint
      run: |
        mkdir -p build/Lint/
        fastlane run swiftlint output_file:"./reports/swiftlint.json" reporter:"json" ignore_exit_status:"true"

    - name: Send Codecov
      # if: github.ref == 'refs/heads/develop'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./reports/cobertura.xml

    - name: Install Sonar
      run: |
        set -o pipefail
        brew install sonar-scanner
          
    # - name: Setup sonarqube
    #   uses: warchant/setup-sonar-scanner@v3
    # - name: Run sonarqube
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: sonar-scanner
    #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    #       -Dsonar.organization=skeleton
    #       -Dsonar.projectKey=lucabelezal_DevOpsPractices
    #       -Dsonar.host.url=https://sonarcloud.io/

    - name: Run Sonar
      # if: github.ref == 'refs/heads/develop'
      run: |
        sonar-scanner -X -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}