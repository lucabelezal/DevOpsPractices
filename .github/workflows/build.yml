name: Build and Test
on:
  push:
    branches:
    - master
    - develop
jobs:
  # tests:
  #   runs-on: macos-latest
  #   continue-on-error: true
  #   strategy:
  #     fail-fast: false
  #     # matrix:
  #     #   include:
  #     #   - destination: 'name=iPhone 11'
  #     #     scheme: CSBootcamp
  #     #     xcode: latest
  #   steps:
  #   - uses: actions/checkout@v2
                
  #   - name: Check Dependencie Cache
  #     uses: actions/cache@v1
  #     id: pods-cache
  #     with:
  #       path: Pods
  #       key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

  #   - name: Install Dependencies
  #     # if: steps.pods-cache.outputs.cache-hit != 'true'
  #     run: |
  #       bundle install
  #       bundle exec pod install
  #     env:
  #        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  #   - name: Build and test
  #     run: |
  #       xcodebuild -version
  #       xcodebuild build test -workspace "${workspace}" -scheme "${scheme}" ${params} -destination "${destination}" | xcpretty && exit ${PIPESTATUS[0]}
  #     env:
  #       workspace: 'CSBootcamp.xcworkspace'
  #       params: '-derivedDataPath ~/Library/Developer/Xcode/DerivedData -enableCodeCoverage YES'
  #       scheme: 'CSBootcamp'
  #       destination: 'name=iPhone 11'
        
  sonar:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    # - name: Setup Ruby
    #   uses: ruby/setup-ruby@v1
    #   with:
    #     ruby-version: 2.6.3
  
    - name: Gem cache
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gem-use-ruby-${{ hashFiles('**/Gemfile.lock') }}

    - name: Install Bundle Dependencies
      run: |
        set -o pipefail
        rm -rf Gemfile.lock
        echo 'gem: --no-ri --no-rdoc' > ~/.gemrc
        gem install bundler
        bundle config path vendor/bundle
        bundle install --without=documentation --jobs 4 --retry 3

    - name: Pods cache
      uses: actions/cache@v2
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

    - name: Setup Cocoapods
      uses: maxim-lobanov/setup-cocoapods@v1
      with:
        podfile-path: ./Podfile.lock

    - name: Install Pod Dependencies
      if: steps.pods-cache.outputs.cache-hit != 'true'
      run: |
        rm -rf Podfile.lock
        rm -rf Pods/
        rm -rf ~/Library/Developer/Xcode/DerivedData
        bundle exec pod install
      
    - name: Build and test
      run: |
        set -o pipefail
        xcodebuild -version
        xcodebuild test -workspace "${workspace}" -scheme "${scheme}" ${params} -destination "${destination}" | xcpretty && exit ${PIPESTATUS[0]}
      env:
        workspace: 'CSBootcamp.xcworkspace'
        scheme: 'CSBootcamp'
        params: '-enableCodeCoverage YES -sdk iphonesimulator'
        destination: 'platform=iOS Simulator,name=iPhone 11,OS=latest'

    - name: Slather
      run: |        
        slather coverage --cobertura-xml --scheme "${scheme}" --workspace "${workspace}" --output-directory "${params}"
        slather coverage --sonarqube-xml --scheme "${scheme}" --workspace "${workspace}" --output-directory "${params}"
      env:
        workspace: 'CSBootcamp.xcworkspace'
        scheme: 'CSBootcamp'
        params: '--output-directory build/Coverage/'
         
    - name: SwiftLint
      run: |
        mkdir -p build/Lint/
        fastlane run swiftlint output_file:"build/Lint/swiftlint.json" reporter:"json" ignore_exit_status:"true"

    - name: Code coverage
      if: github.ref == 'refs/heads/develop'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: build/Coverage/cobertura.xml

    - name: Install Sonar
      run: |
        set -o pipefail
        brew install sonar-scanner

    - name: Run Sonar
      run: |
        sonar-scanner -X -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    # - name: Setup sonarqube
    #   uses: warchant/setup-sonar-scanner@v3
    # - name: Run sonarqube
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: sonar-scanner
    #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    #       -Dsonar.organization=skeleton
    #       -Dsonar.projectKey=lucabelezal_DevOpsPractices
    #       -Dsonar.host.url=https://sonarcloud.io/