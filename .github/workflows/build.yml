name: Build and Test
on:
  push:
    branches:
    - master
    - develop
jobs:
  tests:
    runs-on: macos-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      # matrix:
      #   include:
      #   - destination: 'name=iPhone 11'
      #     scheme: CSBootcamp
      #     xcode: latest
    steps:
    - uses: actions/checkout@v2
                
    - name: Check Dependencie Cache
      uses: actions/cache@v1
      id: pods-cache
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

    - name: Install Dependencies
      # if: steps.pods-cache.outputs.cache-hit != 'true'
      run: |
        bundle install
        bundle exec pod install
      env:
         GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build and test
      run: |
        xcodebuild -version
        xcodebuild build test -workspace "${workspace}" -scheme "${scheme}" ${params} -destination "${destination}" | xcpretty && exit ${PIPESTATUS[0]}
      env:
        workspace: 'CSBootcamp.xcworkspace'
        params: '-derivedDataPath ~/Library/Developer/Xcode/DerivedData -enableCodeCoverage YES'
        scheme: 'CSBootcamp'
        destination: 'name=iPhone 11'
        
  sonar:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    # - name: Setup Ruby
    #   uses: ruby/setup-ruby@v1
    #   with:
    #     ruby-version: 2.6.3

    - name: Prepare Dependency Managers
      run: |
          set -o pipefail
          brew install sonar-scanner
          brew install swiftlint
          gem install bundler

    # - name: Cache RubyGems
    #   uses: actions/cache@v1
    #   with:
    #     path: vendor/bundle
    #     key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
    #     restore-keys: ${{ runner.os }}-gem-

    # - name: Cache Pods
    #   uses: actions/cache@v1
    #   id: pods-cache
    #   with:
    #     path: Pods
    #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

    - name: Install Dependencies
      # if: steps.pods-cache.outputs.cache-hit != 'true'
      run: |
        bundle config
        bundle install
        bundle exec pod install
      env:
         GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    # - name: Build and test
    #   run: |
    #     xcodebuild -version
    #     xcodebuild build test -workspace "${workspace}" -scheme "${scheme}" ${params} -destination "${destination}" | xcpretty && exit ${PIPESTATUS[0]}
    #   env:
    #     workspace: 'CSBootcamp.xcworkspace'
    #     params: '-derivedDataPath ~/Library/Developer/Xcode/DerivedData -enableCodeCoverage YES'
    #     scheme: 'CSBootcamp'
    #     destination: 'name=iPhone 11'

    - name: Slather
      run: |
        set -o pipefail
        xcodebuild test-without-building \
        -workspace CSBootcamp.xcworkspace \
        -scheme CSBootcamp \
        -destination 'platform=iOS Simulator,name=iPhone 12' \
        -derivedDataPath '~/Library/Developer/Xcode/DerivedData' \
        -enableCodeCoverage YES \
        | xcpretty

        slather coverage --sonarqube-xml --scheme CSBootcamp --workspace CSBootcamp.xcworkspace CSBootcamp.xcodeproj --output-directory build/Coverage/

      # env:
      #   project: 'CSBootcamp.xcodeproj'
      #   workspace: 'CSBootcamp.xcworkspace'
      #   params: '--output-directory build/Coverage/ --scheme CSBootcamp'
        # GIT_BRANCH: ${{ steps.get_branch.outputs.branch }}
        # CI_PULL_REQUEST: ${{ github.event.number }}
        # COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         
    # - name: SwiftLint
    #   run: |
    #     fastlane run swiftlint output_file:"./reports/swiftlint.json" reporter:"json" ignore_exit_status:"true"
        
    - name: Run Sonar
      run: |
        sonar-scanner -X -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Code coverage
      if: github.ref == 'refs/heads/develop'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./reports/cobertura.xml

